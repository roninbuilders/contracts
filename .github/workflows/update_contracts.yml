name: Automated contract update and publish

on:
  schedule:
    - cron: "0 0 * * *" # Runs daily at midnight
  workflow_dispatch: # Allows manual trigger

permissions:
  contents: write

jobs:
  update-and-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org/"
          cache: 'pnpm'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Update Contracts
        run: pnpm run generate-contracts

      - name: Check for changes
        id: git-check
        run: |
          git diff --quiet && git diff --staged --quiet || echo "changes_detected=true" >> $GITHUB_OUTPUT

      - name: Configure Git
        if: steps.git-check.outputs.changes_detected == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Increment package version and create release
        if: steps.git-check.outputs.changes_detected == 'true'
        run: |
          # Increment version and get the new version
          pnpm version patch --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          # Commit all changes
          git add .
          git commit -m "chore: update contracts to v$NEW_VERSION"
          
          # Create and push tag
          git tag "v$NEW_VERSION"
          
          # Pull remote changes and push (with retry logic)
          git pull --rebase origin main
          git push origin main
          git push origin "v$NEW_VERSION"

      - name: Build
        if: steps.git-check.outputs.changes_detected == 'true'
        run: pnpm build

      - name: Debug npm config
        if: steps.git-check.outputs.changes_detected == 'true'
        run: |
          echo "=== NPM Configuration Debug ==="
          npm config list
          echo "=== Registry check ==="
          npm config get registry
          echo "=== PNPM Registry check ==="
          pnpm config get registry
          echo "=== Package name check ==="
          cat package.json | grep '"name"'
          echo "=== NPM whoami ==="
          npm whoami
          echo "=== PNPM whoami ==="
          pnpm whoami
          echo "=== Package access check ==="
          npm access ls-collaborators @roninbuilders/contracts || echo "Could not check collaborators"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm
        if: steps.git-check.outputs.changes_detected == 'true'
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.git-check.outputs.changes_detected == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: "v${{ env.NEW_VERSION }}"
          release_name: "Release v${{ env.NEW_VERSION }}"
          body: |
            Automated release with updated contracts.
            
            ## Changes
            - Synchronized with latest contract deployments
          draft: false
          prerelease: false